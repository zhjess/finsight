// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                  String                @id @default(cuid()) 
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  email               String                @unique
  password            String                // store hashed password
  revenueTransactions RevenueTransaction[]
  expenseTransactions ExpenseTransaction[]
  kpis                Kpi[]
}

model RevenueTransaction {
  id                    String               @id @default(cuid())
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  date                  DateTime
  transactionProducts   TransactionProduct[]
  customer              String
  userId                String
  user                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ExpenseTransaction {
  id                    String               @id @default(cuid())
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  date                  DateTime
  counterparty          String
  userId                String
  user                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount                Int
  expenseCategoryId     String
  expenseCategory       ExpenseCategory      @relation(fields: [expenseCategoryId], references: [id], onDelete: Cascade)
}
Neymar
model ExpenseCategory {
  id                  String              @id @default(cuid())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  description         String              @unique
  expenseTransactions ExpenseTransaction[]
  expenseTypeId       String
  expenseType         ExpenseType         @relation(fields: [expenseTypeId], references: [id], onDelete: Cascade)
}

model ExpenseType {
  id                  String              @id @default(cuid())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  description         String              @unique
  expenseCategories   ExpenseCategory[]
}

model Product {
  id                  String          @id @default(cuid())
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  description         String          @unique
  price               Int
  expense             Int
  transactionProducts TransactionProduct[]
}

model TransactionProduct {
  id                    String              @id @default(cuid())
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  revenueTransactionId  String
  revenueTransaction    RevenueTransaction  @relation(fields: [revenueTransactionId], references: [id], onDelete: Cascade)
  productId             String
  product               Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity              Int
}

model Day {
  id            String          @id @default(cuid()) 
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  date          DateTime      
  revenue       Int             // cents instead of fractional dollar
  expenses      Int             // cents instead of fractional dollar
  kpiId         String?
  kpi           Kpi?            @relation(fields: [kpiId], references: [id], onDelete: Cascade)
}

model Month {
  id                      String     @id @default(cuid()) 
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  date                    DateTime   
  revenue                 Int        // cents instead of fractional dollar
  expenses                Int        // cents instead of fractional dollar
  operationalExpenses     Int        // cents instead of fractional dollar
  nonOperationalExpenses  Int        // cents instead of fractional dollar
  kpiId                   String?
  kpi                     Kpi?       @relation(fields: [kpiId], references: [id], onDelete: Cascade)
}

model Kpi {
  id                    String    @id @default(cuid())       
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  totalProfit           Int       // Store in cents
  totalRevenue          Int       // Store in cents
  totalExpenses         Int       // Store in cents
  expensesByCategory    Json      // JSON to store expenses by category
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  monthlyData           Month[]
  dailyData             Day[]
}
